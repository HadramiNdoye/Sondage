k <-qr(Z)$rank
colnames<-colnames(Z)
rownames<-rownames(Z)
Z <-as.matrix(Z)
Ztilde <-diag(sqrt(r)) %*% Z %*%diag(sqrt(c))
e <-svd(Ztilde)
U <-diag(1/sqrt(r))%*%e$u[,1:k]# Attention : ne s'ecrit comme cela que parceque N et M sont diagonales!
V <-diag(1/sqrt(c))%*%e$v[,1:k]
d <- e$d[1:k]
rownames(U) <- rownames
rownames(V) <- colnames
if(length(d)>1)
colnames(U) <-colnames(V) <-paste("dim", 1:k, sep = "")
return(list(U=U,V=V,d=d))
}
r <-rep(1/nrow(mats),nrow(mats)) #lignes ponderees par 1/n
c <-rep(1,ncol(mats)) #colonnes ponderees par 1
U<- gsvd(mats,r,c)$U
V <- gsvd(mats,r,c)$V
d <-gsvd(mats,r,c)$d
cdf <- U %*%diag(d)
head(cdf)
prcomp(mat)
head(cdf)
cdf
cdf <- U %*%diag(d)
cdf
res.acp$ind$coord
res.pca$ind$coord
gsvd <- function(Z,r,c){
#Z matrice numerique de dimension (n,p) et de rang k
#r poids de la metrique des lignes N=diag(r)
# c poids de la metrique des colonnes M=diag(c)
#-----sortie---------------
# d vecteur de taille k contenant les valeurs singulieres (racines carres des valeurs propres)
# U matrice de dimension (n,k) des vecteurs propres de de ZMZ'N
# V matrice de dimension (p,k) des vecteurs propres de de Z'NZM
k <-qr(Z)$rank
colnames<-colnames(Z)
rownames<-rownames(Z)
Z <-as.matrix(Z)
Ztilde <-diag(sqrt(r)) %*% Z %*%diag(sqrt(c))
e <-svd(Ztilde)
U <-diag(1/sqrt(r))%*%e$u[,1:k]# Attention : ne s'ecrit comme cela que parceque N et M sont diagonales!
V <-diag(1/sqrt(c))%*%e$v[,1:k]
d <- e$d[1:k]
rownames(U) <- rownames
rownames(V) <- colnames
if(length(d)>1)
colnames(U) <-colnames(V) <-paste("dim", 1:k, sep = "")
return(list(U=U,V=V,d=d))
}
r <-rep(1/nrow(mats),nrow(mats)) #lignes ponderees par 1/n
c <-rep(1,ncol(mats)) #colonnes ponderees par 1
U<- gsvd(mats,r,c)$U
V <- gsvd(mats,r,c)$V
d <-gsvd(mats,r,c)$d
U %*%diag(d) # Coordonnées de X
V %*%diag(d) # Coordonnées de Y
prcomp(mats)
PCA(mat,scale.unit = TRUE,graph = FALSE)$ind$coord
gsvd <- function(Z,r,c){
#Z matrice numerique de dimension (n,p) et de rang k
#r poids de la metrique des lignes N=diag(r)
# c poids de la metrique des colonnes M=diag(c)
#-----sortie---------------
# d vecteur de taille k contenant les valeurs singulieres (racines carres des valeurs propres)
# U matrice de dimension (n,k) des vecteurs propres de de ZMZ'N
# V matrice de dimension (p,k) des vecteurs propres de de Z'NZM
k <-qr(Z)$rank
colnames<-colnames(Z)
rownames<-rownames(Z)
Z <-as.matrix(Z)
Ztilde <-diag(sqrt(r)) %*% Z %*%diag(sqrt(c))
e <-svd(Ztilde)
U <-diag(1/sqrt(r))%*%e$u[,1:k]# Attention : ne s'ecrit comme cela que parceque N et M sont diagonales!
V <-diag(1/sqrt(c))%*%e$v[,1:k]
d <- e$d[1:k]
rownames(U) <- rownames
rownames(V) <- colnames
if(length(d)>1)
colnames(U) <-colnames(V) <-paste("dim", 1:k, sep = "")
return(list(U=U,V=V,d=d))
}
r <-rep(1/nrow(mats),nrow(mats)) #lignes ponderees par 1/n
c <-rep(1,ncol(mats)) #colonnes ponderees par 1
U<- gsvd(mats,r,c)$U
V <- gsvd(mats,r,c)$V
d <-gsvd(mats,r,c)$d
U %*% diag(d) # Coordonnées de X
V %*% diag(d) # Coordonnées de Y
prcomp(mats)
PCA(mat,scale.unit = TRUE,graph = FALSE)$ind$coord
var$coord
# load data
data_ski <- read.table("data/stations.txt",header = TRUE)
# extraction des variables quantitatives
data_ski_active <- as.matrix(data_ski[1:32,2:7])
rownames(data_ski_active) <- data_ski$Nom
summary(data_ski_active)
pcaski <- PCA(data_ski_active,scale.unit = T,graph = FALSE)
# Visualisation des valeurs propres
valp <- pcaski$eig
fviz_eig(pcaski, addlabels = TRUE, ylim = c(0, 50))
var <- get_pca_var(pcaski)
var$coord
fviz_pca_var(pcaski,axes = c(1,2))
corrplot(var$cos2,is.corr = FALSE)
fviz_cos2(pcaski, choice = "var", axes = 1 :2)
fviz_pca_var(pcaski, col.var = "cos2",gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),repel = TRUE)
var$contrib
corrplot(var$contrib,is.corr = FALSE)
fviz_contrib(pcaski, choice = "var", axes = 1 :2, top = 6)
corrplot(var$cos2,is.corr = FALSE)
fviz_cos2(pcaski, choice = "var", axes = 1 :2)
corrplot(var$cos2,is.corr = FALSE)
fviz_cos2(pcaski, choice = "var", axes = 1 :2)
fviz_pca_var(pcaski, col.var = "cos2",gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),repel = TRUE)
var$contrib
corrplot(var$contrib,is.corr = FALSE)
fviz_contrib(pcaski, choice = "var", axes = 1 :2, top = 6)
fviz_pca_var(pcaski, col.var = "contrib",gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),alha.var="contrib" )
ind <- get_pca_ind(pcaski)
fviz_pca_ind (pcaski, col.ind = "cos2",gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),repel = TRUE)
fviz_contrib(pcaski, choice = "ind", axes = 1 :2)
View(data_ski_active)
ind <- get_pca_ind(pcaski)
fviz_pca_ind (pcaski, col.ind = "cos2",gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),repel = TRUE)
fviz_contrib(pcaski, choice = "ind", axes = 1 :2)
fviz_pca_biplot(pcaski,
repel = TRUE,col.var = "#2E9FDF", # Couleur des variables
col.ind = "#696969") # Couleur des individues )
View(data_ski_active)
fviz_pca_biplot(pcaski,
repel = TRUE,col.var = "#2E9FDF", # Couleur des variables
col.ind = "#696969") # Couleur des individues )
knitr::opts_chunk$set(echo = TRUE)
#matrice des coordonnees factorielles sur 4 dimensions
mcf <- rbind(caw2$row$coord[,1:4],caw2$row.sup$coord[,1:4])
dataextr <- dataw[1:15,1:15]
dataw <- read.csv("data/writers.csv",header = TRUE,row.names = 1)
head(dataw,4)
summary(dataw)
dataextr <- dataw[1:15,1:15]
chisq.test(dataextr)
caw1 <- CA(dataextr,graph = FALSE)
caw1$eig
plot(caw1)
View(caw1)
View(dataw)
knitr::opts_chunk$set(echo = TRUE)
sol.kmeans <- kmeansruns(decathlon2.active.cr,krange=2:10,criterion="ch")
knitr::opts_chunk$set(echo = TRUE)
library("FactoMineR")
library("factoextra")
library("corrplot")
library("fpc")
# chargement des données decathlon2
data("decathlon2")
decathlon2.active <- decathlon2[1:23,1:10]
head(decathlon2.active,4)
summary(decathlon2.active)
decathlon2.active.cr <- scale(decathlon2.active,center=T,scale=T)
dist.dec2 <- dist(decathlon2.active.cr)
clust.dc2 <- hclust(dist.dec2,method = "ward.D2")
plot(clust.dc2)
rect.hclust(clust.dc2,k=4)
print(sort(cutree(clust.dc2,k=4)))
groupes.kmeans <- kmeans(decathlon2.active.cr,centers=4,nstart=5)
inertie <- rep(0,times=10)
for (k in 1:10){
group <- kmeans(decathlon2.active.cr,centers = k,nstart=5)
inertie[k] <- group$betweenss/group$totss
}
plot(1:10,inertie,type="b",xlab="Nb. de groupes",ylab="% inertie expliquée")
groupes.kmeans <- kmeans(decathlon2.active.cr,centers=4,nstart=5)
inertie <- rep(0,times=10)
for (k in 2:10){
group <- kmeans(decathlon2.active.cr,centers = k,nstart=5)
inertie[k] <- group$betweenss/group$totss
}
plot(1:10,inertie,type="b",xlab="Nb. de groupes",ylab="% inertie expliquée")
sol.kmeans <- kmeansruns(decathlon2.active.cr,krange=2:10,criterion="ch")
plot(1:10,sol.kmeans$crit,type="b",xlab="Nb. de groupes",ylab="Silhouette")
res.da <- PCA(decathlon2.active,scale.unit = TRUE,graph = FALSE)
fviz_pca_biplot(res.da,repel = TRUE,col.var = "#2E9FDF", col.ind = "#696969")
groupes.kmeans <- kmeans(etudiants.cr,centers=4,nstart=5)
View(decathlon2.active)
res.da <- PCA(decathlon2.active,scale.unit = TRUE,graph = FALSE)
fviz_pca_biplot(res.da,repel = TRUE,col.var = "#2E9FDF", col.ind = "#696969")
# load data
data <- read_excel("data/Donnees-TP2-M1-MIASHS.xls")
library(tidyverse)
library(readxl)
library(gplots)
# load data
data <- read_excel("data/Donnees-TP2-M1-MIASHS.xls")
summary(data)
tabc1 <- table(data$Sexe,data$Diplome)
tabc2 <- round(prop.table(tabc1),2)
tabc3 <- tabc2*100
balloonplot(tabc1)
ggplot(data=data.frame(tabc1)) + geom_bar(stat="identity",mapping = aes(x = Var2,y = Freq,fill=Var1))+xlab("Diplome") + ylab("Total H/F") + ggtitle("Diagramme en baton")
matfreq <- tabc1 / sum(tac1)
matfreq <- tabc1 / sum(tabc1)
dl <- round(apply(matfreq,1,sum),2)
dc <- round(apply(matfreq,2,sum),2)
tabc1
colSums(tabc1)
# distribution conditionnelle
DC <- sweep(tabc1,2,colSums(tabc1),"/")
DC
# distribution marginale
matfreq <- tabc1 / sum(tabc1)
dl <- round(apply(matfreq,1,sum),2)
dc <- round(apply(matfreq,2,sum),2)
# distribution conditionnelle
DC <- sweep(tabc1,2,colSums(tabc1),"/")
dl
dc
DC
# load data
data <- read_excel("data/Donnees-TP2-M1-MIASHS.xls")
summary(data)
# test de khi-deux
tabse <- table(data$Sexe,data$EtaCivil)
# test de khi-deux
dfse <- subset(data,select = c(Sexe,EtatCivil))
dfse <- as.table(as.matrix(dfse))
dfse
tab.disjonctif(dfse)
tab.disjonctif(dfse)
table(data)
class(data)
datavq <- subset(data,Sexe,EtatCivil,Diplome,AvisReforme)
datavq <- subset(data,select=c(Sexe,EtatCivil,Diplome,AvisReforme))
datavq
View(data)
tab.disjonctif(datavq)
View(data)
table(datavq)
tabc1 <- table(datavq)
tabc2 <- round(prop.table(tabc1),2)
tabc3 <- tabc2*100
tabc2 <- round(tabc1/sum(tabc1),2)
tabc3 <- tabc2*100
tabc3
data.frame(tabc1)
barplot(tabc1)
barplot(as.matrix(tabc1))
balloonplot(tabc1)
balloonplot(tabc1)
Var1 <- c(Sexe,EtatCivil,Diplome,AvisReforme)
ggplot(data=data.frame(tabc1)) + geom_bar(stat="identity",mapping = aes(x = c(Sexe,EtatCivil,Diplome,AvisReforme),y = Freq)+xlab("Diplome") + ylab("Total H/F") + ggtitle("Diagramme en baton"))
ggplot(data=data.frame(tabc1)) + geom_bar(stat="identity",mapping = aes(x = Sexe,y = Freq)+xlab("Diplome") + ylab("Total H/F") + ggtitle("Diagramme en baton"))
barplot(tabc1,beside = TRUE)
barplot(as.matrix(tabc1),beside = TRUE)
barplot(as.matrix(tabc1),beside = FALSE)
barplot(as.matrix(tabc1),beside = TRUE)
barplot(as.matrix(tabc1),beside = TRUE)
barplot(as.matrix(tabc1),beside = TRUE,names.arg = c("Sexe,EtatCivil,Diplome,AvisReforme"))
barplot(as.matrix(tabc1),beside = TRUE,col = "tabc1")
barplot(as.matrix(tabc1),beside = TRUE)
names(tabc1)
name(tabc1)
# distribution marginale
matfreq <- tabc1 / sum(tabc1)
dl <- round(apply(matfreq,1,sum),2)
dl
dc <- round(apply(matfreq,2,sum),2)
dc
# distribution conditionnelle
DC <- sweep(tabc1,2,colSums(tabc1),"/")
tabc1
# distribution conditionnelle
DC <- sweep(tabc1,2,colSums(tabc1),"/")
DC
DC
# test de khi-deux
dfse <- subset(data,select = c(Sexe,EtatCivil))
# test de khi-deux
chisq.test(tabc1
# test de khi-deux
chisq.test(tabc1)
# test de khi-deux
chisq.test(tabc1)
# test de khi-deux
dfse <- subset(data,select = c(Sexe,EtatCivil))
chisq.test(dfse)
# test de khi-deux
dfse <- subset(data,select = c(Sexe,EtatCivil))
dfse
tab.disjonctif(dfse)
as.factor(dfse$Sexe)
as.factor(dfse$Sexe,levels=c(0,1))
factor(dfse$Sexe,levels=c(0,1))
factor(dfse$Sexe)
dfse <- factor(dfse)
# test de khi-deux
dfse <- subset(data,select = c(Sexe,EtatCivil))
dfse <- factor(dfse)
levels(dfse)[levels(dfse)=="Femme"] <- 0
levels(dfse)[levels(dfse)=="Homme"] <- 1
dfse
# test de khi-deux
dfse <- subset(data,select = c(Sexe,EtatCivil))
dfse
dfse <- factor(dfse)
ddfse
dfse
dfse1 <- factor(dfse$Sexe)
# test de khi-deux
dfse <- subset(data,select = c(Sexe,EtatCivil))
dfse1 <- factor(dfse$Sexe)
dfse1
levels(dfse1)[levels(dfse1)=="Femme"] <- 0
levels(dfse1)[levels(dfse1)=="Homme"] <- 1
dfse1
dfse2 <- factor(dfse$EtatCivil)
dfse2
# test de khi-deux
dfse <- subset(data,select = c(Sexe,EtatCivil))
dfse
tab.disjonctif(tabc1)
table(dfse)
# test de khi-deux
dfse <- subset(data,select = c(Sexe,EtatCivil))
tabdfse <- table(dfse)
chisq.test(tabdfse)
# Resumé de la variable stress
summary(data$Stress)
boxplot(stress)
boxplot(Stress)
boxplot(data$Stress)
# Resumé de la variable stress
summary(data$Stress)
boxplot(data$Stress,color="blue")
# Resumé de la variable stress
summary(data$Stress)
boxplot(data$Stress,col="blue")
boxplot(data$Stress,col="blue",main="boxplot de la variable Stress")
# Resumé de la variable stress
summary(data$Stress)
boxplot(data$Stress,col="blue",main="boxplot de la variable Stress")
# Resumé de la variable stress
head(data$Stress)
# Resumé de la variable stress
s <- data$Stress
summary(s)
boxplot(s,col="blue",main="boxplot de la variable Stress")
Nclass(s,5)
Nclasse(s,5)
# Resumé de la variable stress
s <- data$Stress
summary(s)
boxplot(s,col="blue",main="boxplot de la variable Stress")
tabSE <- as.table(subset(data,select = c("Stress","EtatCivil")))
boxplot(s,col="blue",main="boxplot de la variable Stress")
tabSE <- table(subset(data,select = c("Stress","EtatCivil")))
tabSE
tabdfse <- table(dfse)
tabdfse
datf <- subset(data,select = c("Stress","EtatCivil"))
datf
tabSE <- table(datf)
tabSE
datf <- subset(data,select = c(Stress,EtatCivil))
tabSE <- table(datf)
tabSE
chisq.test(tabSE)
tabSE / sum(tabSE)
head(tabSE / sum(tabSE),6)
head(round(tabSE / sum(tabSE),2) * 100)
head(round(tabSE / sum(tabSE),2))
head(round(tabSE / sum(tabSE),2) * 100)
chisq.test(tabSE)
boxplot(dataf$Stress~dataf$EtatCivil)
boxplot(datf$Stress~datf$EtatCivil)
g2 <- ggplot(datf,aes(EtatCivil, Stress,fill = Stress)) + geom_boxplot()
g2 <- ggplot(datf,aes(EtatCivil, Stress,fill = Stress)) + geom_boxplot()
ggplot(datf,aes(EtatCivil, Stress,fill = Stress)) + geom_boxplot()
ggplot(datf,aes(EtatCivil, Stress,fill = Stress)) + geom_boxplot()
knitr::opts_chunk$set(echo = TRUE)
length(which(s > S + 0.20 )) / size
setwd("~/M1_SSD/S1/Sondage/TP1-WEB/R")
# importation du fichier ScriptEtud.R
source("scriptsEtud.R")
n <- 500
P <- 1 / 10
theta <- 0.8
n.sim <- 1000
set.seed(2001)
piaw <- questDelicateMeth1(n,P,theta,n.sim)
probaoui1 <- P * (2 * theta - 1) - theta + 1
# X est une loi Binomiale
X <- rbinom(n.sim,n,probaoui1)
a <- (theta - 1) / ((2 * theta) - 1)
b <- 1 / (n * ((2 * theta) - 1))
moyenneEst1 <- a + (b * n * probaoui1)
varX <- n * probaoui1 * (1 - probaoui1)
ecarttype1 <- sqrt(b^2 * varX)
length(which(s > S + 0.20 )) / size
probaoui1 <- P * (2 * theta - 1) - theta + 1
# X est une loi Binomiale
X <- rbinom(n.sim,n,probaoui1)
a <- (theta - 1) / ((2 * theta) - 1)
b <- 1 / (n * ((2 * theta) - 1))
moyenneEst1 <- a + (b * n * probaoui1)
varX <- n * probaoui1 * (1 - probaoui1)
ecarttype1 <- sqrt(b^2 * varX)
mean(piaw)
sd(piaw)
hist(piaw,probability = TRUE,col = "blue")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# importation du fichier ScriptEtud.R
source("scriptsEtud.R")
n <- 500
P <- 1 / 10
theta <- 0.8
n.sim <- 1000
set.seed(2001)
piaw <- questDelicateMeth1(n,P,theta,n.sim)
probaoui1 <- P * (2 * theta - 1) - theta + 1
# X est une loi Binomiale
X <- rbinom(n.sim,n,probaoui1)
a <- (theta - 1) / ((2 * theta) - 1)
b <- 1 / (n * ((2 * theta) - 1))
moyenneEst1 <- a + (b * n * probaoui1)
varX <- n * probaoui1 * (1 - probaoui1)
ecarttype1 <- sqrt(b^2 * varX)
mean(piaw)
sd(piaw)
hist(piaw,probability = TRUE,col = "blue")
alpha <- 0.217
pia <- questDelicateMeth2(n, P, theta, alpha, n.sim)
probaoui2 <- (theta * P) + ((1 - theta) * alpha)
a <- alpha * (theta - 1) / theta
b <- 1 / (n * theta)
moyenneEst2 <- a + (b * n * probaoui2)
varX <- n * probaoui2 * (1 - probaoui2)
ecarttype2 <- sqrt((1 / (n * theta)^2) * varX)
mean(pia)
sd(pia)
hist(pia,probability = TRUE,col = "red")
source("Script2.R")
ybarru <- sum(pop) / N
sigmacarre <- (1 / N) * sum((pop - ybarru)^2)
S <- sqrt((sigmacarre * N) / (N - 1))
options(OutDe=",")
pop <- c (3 , 6 , 24 , 27 , 30 , 36 , 51 , 57)
N <- length ( pop )
n <- 3
(n.ech <- choose (N , n))
ech.all <- cbind ( choix <- t ( matrix ( combn (1: N , n ) ,n , n.ech ) ) ,( matrix (pop [ choix ] , n.ech , n ) ) )
head (ech.all)
donneepop <- ech.all[,4:6]
ybarr <- apply(donneepop,1,mean)
s <- apply(donneepop,1,sd)
sybarr <- (1 - (n / N)) * (s^2 / n)
b.inf <- ybarr - (1.96 * sqrt(sybarr))
b.sup <- ybarr + (1.96 * sqrt(sybarr))
size <- 56
incl <- rep(0,size)
for (i in 1:size){
if(ybarru <= b.sup[i] && ybarr >= b.inf[i]){
incl[i] <- 1
}
else{
incl[i] <- 0
}
}
tram.donnee <- cbind(ybarr,s,b.inf,b.sup,incl)
head(tram.donnee,5)
# moyenne de chaque population a 3 echantillons
muybarr <- mean(tram.donnee[,1])
muybarr
ybarru
f <- n / N
head(sqrt(1 - f) * (s / sqrt(n)),5)
head(sqrt(sybarr),5)
esp <- cumsum(tram.donnee[,2]) / (1:size)
plot(esp,xlim = c(min(esp),max(esp)),type = "l",col="blue",main = "Esperance de S / s")
abline(h = S,col="red")
legend(x = 18,y = 14,legend=c("Esperence de s","Valeur de S"),fill = c("blue","red"),col=c("blue,red"))
length(which(ybarr > ybarru + 2 )) / size
length(which(ybarr > ybarru + 5 )) / size
length(which(ybarr > ybarru + 0.25 )) / size
length(which(s > S + 0.20 )) / size
S
born.inf <- ybarr - (2 * sqrt(sybarr))
born.sup <- ybarr + (3 * sqrt(sybarr))
born.inf <- ybarr - (2 * sqrt(sybarr))
born.sup <- ybarr + (3 * sqrt(sybarr))
length(which(ybarru >= born.inf && ybarru <= born.sup)) / size
born.inf <- ybarr - (2 * sqrt(sybarr))
born.inf
born.sup <- ybarr + (3 * sqrt(sybarr))
born.sup
which(ybarru >= born.inf & ybarru <= born.sup)
born.inf <- ybarr - (2 * sqrt(sybarr))
born.sup <- ybarr + (3 * sqrt(sybarr))
length(which(ybarru >= born.inf & ybarru <= born.sup)) / size
born.inf <- ybarr - (2 * sqrt(sybarr))
born.sup <- ybarr + (3 * sqrt(sybarr))
length(which(ybarru >= born.inf && ybarru <= born.sup)) / size
born.inf <- ybarr - (2 * sqrt(sybarr))
born.sup <- ybarr + (3 * sqrt(sybarr))
length(which(ybarru >= born.inf & ybarru <= born.sup)) / size
0,9285714 * 100
0,9285714 * 100
0.9285714 * 100
